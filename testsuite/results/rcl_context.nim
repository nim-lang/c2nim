##  Copyright 2018 Open Source Robotics Foundation, Inc.
##
##  @file

import
  rmw/init, rcl/allocator, rcl/arguments, rcl/init_options, rcl/macros,
  rcl/types, rcl/visibility_control

type

  rcl_context_instance_id_t* = uint64 ##  A unique ID per context instance.

  rcl_context_impl_t* = rcl_context_impl_s

  rcl_context_t* {.importc: "rcl_context_t", header: "rcl_context.h", bycopy.} = object ##
                              ##  Encapsulates the non-global state of an init/shutdown cycle.
                              ##
                              ##  The context is used in the creation of top level entities like nodes and
                              ##  guard conditions, as well as to shutdown a specific instance of init.
                              ##
                              ##
    global_arguments* {.importc: "global_arguments".}: rcl_arguments_t ##
                              ##  Global arguments for all nodes which share this context.
                              ##  Typically generated by the parsing of argc/argv in rcl_init().
    impl* {.importc: "impl".}: ptr rcl_context_impl_t ##
                              ##  Implementation specific pointer.
    ##  The assumption that this is big enough for an atomic_uint_least64_t is
    ##  In most cases it should just be a plain uint64_t.
    ##  @cond Doxygen_Suppress
    when not defined(RCL_CONTEXT_ATOMIC_INSTANCE_ID_STORAGE_SIZE):
      const
        RCL_CONTEXT_ATOMIC_INSTANCE_ID_STORAGE_SIZE* = sizeof((uint_least64_t))
    ##  @endcond
    ##  Private storage for instance ID atomic.
    instance_id_storage* {.importc: "instance_id_storage".}: array[
        RCL_CONTEXT_ATOMIC_INSTANCE_ID_STORAGE_SIZE, uint8] ##
                              ##
                              ##  Accessing the instance id should be done using the function
                              ##



proc rcl_get_zero_initialized_context*(): rcl_context_t {.
    importc: "rcl_get_zero_initialized_context", header: "rcl_context.h".}
  ##
                              ##  Return a zero initialization context object.

proc rcl_context_fini*(context: ptr rcl_context_t): rcl_ret_t {.
    importc: "rcl_context_fini", header: "rcl_context.h".}
  ##
                              ##  Finalize a context.
                              ##
                              ##
                              ##

proc rcl_context_get_init_options*(context: ptr rcl_context_t): ptr rcl_init_options_t {.
    importc: "rcl_context_get_init_options", header: "rcl_context.h".}
  ##
                              ##  Return the init options used during initialization for this context.
                              ##
                              ##
                              ##  \param[in] context object from which the init options should be retrieved
                              ##  \return pointer to the the init options, or
                              ##  \return `NULL` if there was an error
                              ##

proc rcl_context_get_instance_id*(context: ptr rcl_context_t): rcl_context_instance_id_t {.
    importc: "rcl_context_get_instance_id", header: "rcl_context.h".}
  ##
                              ##  Returns an unsigned integer that is unique to the given context, or `0` if invalid.
                              ##
                              ##

proc rcl_context_get_domain_id*(context: ptr rcl_context_t;
                                domain_id: ptr csize_t): rcl_ret_t {.
    importc: "rcl_context_get_domain_id", header: "rcl_context.h".}
  ##
                              ##  Returns the context domain id.
                              ##
                              ##

proc rcl_context_is_valid*(context: ptr rcl_context_t): bool {.
    importc: "rcl_context_is_valid", header: "rcl_context.h".}
  ##
                              ##  Return `true` if the given context is currently valid, otherwise `false`.
                              ##
                              ##  If context is `NULL`, then `false` is returned.
                              ##  If context is zero-initialized, then `false` is returned.
                              ##  If context is uninitialized, then it is undefined behavior.
                              ##
                              ##

proc rcl_context_get_rmw_context*(context: ptr rcl_context_t): ptr rmw_context_t {.
    importc: "rcl_context_get_rmw_context", header: "rcl_context.h".}
  ##
                              ##  Return pointer to the rmw context if the given context is currently valid, otherwise `NULL`.
                              ##
                              ##  If context is `NULL`, then `NULL` is returned.
                              ##  If context is zero-initialized, then `NULL` is returned.
                              ##  If context is uninitialized, then it is undefined behavior.
                              ##
                              ## 